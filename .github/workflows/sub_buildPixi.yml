# SPDX-License-Identifier: LGPL-2.1-or-later
# ***************************************************************************
# *                                                                         *
# *   Copyright (c) 2024 0penBrain, Lorenz Lechner and Jacob Oursland.      *
# *                                                                         *
# *   This file is part of FreeCAD.                                         *
# *                                                                         *
# *   FreeCAD is free software: you can redistribute it and/or modify it    *
# *   under the terms of the GNU Lesser General Public License as           *
# *   published by the Free Software Foundation, either version 2.1 of the  *
# *   License, or (at your option) any later version.                       *
# *                                                                         *
# *   FreeCAD is distributed in the hope that it will be useful, but        *
# *   WITHOUT ANY WARRANTY; without even the implied warranty of            *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      *
# *   Lesser General Public License for more details.                       *
# *                                                                         *
# *   You should have received a copy of the GNU Lesser General Public      *
# *   License along with FreeCAD. If not, see                               *
# *   <https://www.gnu.org/licenses/>.                                      *
# *                                                                         *
# ***************************************************************************

# This is a build and test workflow for CI of FreeCAD.
# This workflow aims at building and testing FreeCAD on a Conda environment on macOS.

name: Pixi Builds

on:
  workflow_call:
    inputs:
      artifactBasename:
        type: string
        required: true
      testOnBuildDir:
        default: false
        type: boolean
        required: false
      allowedToFail:
        default: false
        type: boolean
        required: false
    outputs:
      reportFile:
        value: ${{ jobs.Build.outputs.reportFile }}

jobs:
  build_with_pixi:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ inputs.allowedToFail }}
    env:
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 5
      CCACHE_CONFIGPATH: ${{ github.workspace }}/ccache/config
      CCACHE_DIR: ${{ github.workspace }}/ccache
      CCACHE_MAXSIZE: 1G
      CCACHE_NODIRECT: true
      CCACHE_NOHASHDIR: true
      CCACHE_NOINODECACHE: true
      CCACHE_SLOPPINESS: "include_file_ctime,include_file_mtime,pch_defines,time_macros"
      builddir: ${{ github.workspace }}/build/release/
      cacheKey: pixi-${{ matrix.os }}
      config: release
      logdir: ${{ github.workspace }}/logs/
      reportdir: ${{ github.workspace }}/report/
      reportfilename: ${{ inputs.artifactBasename }}-${{ matrix.os }}-report.md
    outputs:
      reportFile: ${{ steps.Init.outputs.reportFile }}

    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - name: Set Platform Environment Variables
      shell: bash -l {0}
      env:
        OPERATING_SYSTEM: ${{ runner.os }}
      run: |
        if [[ $OPERATING_SYSTEM == 'Windows' ]]; then
          echo 'CCACHE_COMPILERCHECK=%compiler%' >> "$GITHUB_ENV"
        else
          echo 'CCACHE_COMPILERCHECK=%compiler% -dumpfullversion -dumpversion' >> "$GITHUB_ENV"
        fi

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Add GCC Problem Matcher
      if: runner.os == 'Linux'
      run: |
        echo "::add-matcher::${{ runner.workspace }}/FreeCAD/.github/problemMatcher/gcc.json"

    - name: Add Clang Problem Matcher
      if: runner.os == 'macOS'
      run: |
        echo "::add-matcher::${{ runner.workspace }}/FreeCAD/.github/problemMatcher/clang.json"

    - name: Add MSVC++ Problem Matcher
      if: runner.os == 'Windows'
      run: |
        echo "::add-matcher::${{ runner.workspace }}/FreeCAD/.github/problemMatcher/msvc.json"

    - name: Make needed directories, files and initializations
      id: Init
      run: |
        mkdir -p ${{ env.builddir }}
        mkdir -p ${{ env.logdir }}
        mkdir -p ${{ env.reportdir }}
        echo "reportFile=${{ env.reportfilename }}" >> $GITHUB_OUTPUT

    - uses: prefix-dev/setup-pixi@fef5c9568ca6c4ff7707bf840ab0692ba3f08293 # v0.9.0
      with:
        pixi-version: v0.48.1
        cache: false

    - name: Restore Compiler Cache
      id: cache-restore
      if: always()
      uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: FC-${{ env.cacheKey }}-${{ github.ref }}-${{ github.run_id }}
        restore-keys: |
          FC-${{ env.cacheKey }}-${{ github.ref }}-
          FC-${{ env.cacheKey }}-

    - name: Print CCache statistics before build, reset stats and print config
      run: |
        pixi run ccache -s
        pixi run ccache -z
        pixi run ccache -p
        pixi run ccache -C
        pixi run ccache -c

    - name: CMake Configure
      run: |
        pixi run configure-${{ env.config }} -DFREECAD_USE_PCH=ON -DFREECAD_USE_CCACHE=OFF

    - name: Build Benchmark - All updated Mods
      shell: bash
      run: |
        ./build_benchmark.sh TechDraw TechDrawGui Sketcher SketcherGui

    - name: Print ccache statistics after Build
      if: always()
      run: |
        pixi run ccache -s

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ inputs.artifactBasename }}-${{ matrix.os }}-Logs
        path: |
          ${{ env.logdir }}
          /var/crash/*FreeCAD*

    - name: Upload report
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ env.reportfilename }}
        path: |
          ${{env.reportdir}}${{ env.reportfilename }}
